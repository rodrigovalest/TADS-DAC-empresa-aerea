services:
  db-cliente:
    image: postgres:17.4
    container_name: db-cliente
    ports:
      - '14000:5432'
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_CLIENTE}
    networks:
      - private_network

  db-funcionario:
    image: postgres:17.4
    container_name: db-funcionario
    ports:
      - '14001:5432'
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_FUNCIONARIO}
    networks:
      - private_network

  db-reserva:
    image: postgres:17.4
    container_name: db-reserva
    ports:
      - '14002:5432'
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_RESERVA}
    networks:
      - private_network

  db-voos:
    image: postgres:17.4
    container_name: db-voos
    ports:
      - '14003:5432'
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB_VOOS}
    networks:
      - private_network

  db-auth:
    image: mongo:latest
    container_name: db-auth
    ports:
      - '14004:27017'
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
    networks:
      - private_network

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    ports:
      - "14005:5672"
      - "15672:15672"
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - private_network

  ms-auth:
    build:
      context: ./backend
      dockerfile: ms-auth/Dockerfile
    container_name: ms-auth
    ports:
      - "8084:8084"
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
      db-auth:
        condition: service_started
    networks:
      - private_network

  ms-cliente:
    build:
      context: ./backend
      dockerfile: ms-cliente/Dockerfile
    container_name: ms-cliente
    ports:
      - "8080:8080"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db-auth:
        condition: service_started
      db-cliente:
        condition: service_started
    networks:
      - private_network

  ms-reserva:
    build:
      context: ./backend
      dockerfile: ms-reserva/Dockerfile
    container_name: ms-reserva
    ports:
      - "8082:8082"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db-auth:
        condition: service_started
    networks:
      - private_network

  ms-voos:
    build:
      context: ./backend
      dockerfile: ms-voos/Dockerfile
    container_name: ms-voos
    ports:
      - "8083:8083"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db-auth:
        condition: service_started
      db-voos:
        condition: service_started
    networks:
      - private_network
  
  ms-funcionarios:
    build:
      context: ./backend
      dockerfile: ms-funcionarios/Dockerfile
    container_name: ms-funcionarios
    ports:
      - "8081:8081"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db-auth:
        condition: service_started
      db-funcionario:
        condition: service_started
    networks:
      - private_network

  # frontend:
  #   build: ./frontend
  #   container_name: frontend_service
  #   restart: always
  #   ports:
  #     - "3000:3000"
  #   networks:
  #     - public_network
  #     - private_network
  #   depends_on:
  #     - db-cliente
  #     - db-funcionario
  #     - db-reserva
  #     - db-voos
  #     - db-auth
  #     - rabbitmq

  api_gateway:
    build: 
      context: ./api_gateway
      dockerfile: Dockerfile
    container_name: api_gateway
    ports:
      - "8000:8000"
    networks:
      - public_network
      - private_network
    depends_on:
      - ms-cliente
      - ms-funcionarios
      - ms-reserva
      - ms-voos
      - ms-auth
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "16543:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    depends_on:
      - db-cliente
    networks:
      - private_network

networks:
  private_network:
    driver: bridge
  public_network:
    driver: bridge
